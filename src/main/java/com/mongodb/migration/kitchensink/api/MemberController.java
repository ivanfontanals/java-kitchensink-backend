/*
 * This file was generated by the migration tool. Do not modify it manually.
 */

package com.mongodb.migration.kitchensink.api;

import com.mongodb.migration.kitchensink.domain.model.Member;
import com.mongodb.migration.kitchensink.domain.ports.incoming.MemberService;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** REST Controller for managing members. */
@RestController
@RequestMapping("/api/members")
public class MemberController {

  private final MemberService memberService;

  public MemberController(MemberService memberService) {
    this.memberService = memberService;
  }

  /**
   * Registers a new member.
   *
   * @param member the member to register
   * @return the registered member
   */
  @PostMapping
  public Mono<ResponseEntity<Member>> registerMember(@Valid @RequestBody Member member) {
    return Mono.fromCallable(() -> memberService.registerMember(member)).map(ResponseEntity::ok);
  }

  /**
   * Retrieves a member by ID.
   *
   * @param id the ID of the member
   * @return the member with the given ID
   */
  @GetMapping("/{id}")
  public Mono<ResponseEntity<Member>> getMemberById(@PathVariable String id) {
    return Mono.fromCallable(() -> memberService.findMemberById(id))
        .flatMap(optionalMember -> optionalMember.map(Mono::just).orElseGet(Mono::empty))
        .map(ResponseEntity::ok)
        .defaultIfEmpty(ResponseEntity.notFound().build());
  }

  /**
   * Retrieves all members.
   *
   * @return a list of all members
   */
  @GetMapping
  public Flux<Member> listAllMembers() {
    return Flux.fromIterable(memberService.listAllMembers());
  }

  /**
   * Deletes a member by ID.
   *
   * @param id the ID of the member to delete
   * @return a response entity indicating the result
   */
  @DeleteMapping("/{id}")
  public Mono<ResponseEntity<Void>> deleteMember(@PathVariable String id) {
    return Mono.fromRunnable(() -> memberService.deleteMember(id))
        .then(Mono.just(ResponseEntity.noContent().build()));
  }
}

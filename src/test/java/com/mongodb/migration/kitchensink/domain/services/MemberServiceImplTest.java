/*
 * This file was generated by the migration tool. Do not modify it manually.
 */

package com.mongodb.migration.kitchensink.domain.services;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.mongodb.migration.kitchensink.domain.model.Member;
import com.mongodb.migration.kitchensink.domain.ports.outgoing.MemberRepository;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

/** Unit tests for MemberServiceImpl. */
class MemberServiceImplTest {

  @Mock private MemberRepository memberRepository;

  @InjectMocks private MemberServiceImpl memberService;

  @BeforeEach
  void setUp() {
    MockitoAnnotations.openMocks(this);
  }

  @Test
  void registerMember_success() throws Exception {
    Member member = new Member("1", "John Doe", "john.doe@example.com", "1234567890");
    when(memberRepository.findByEmail(member.getEmail())).thenReturn(Optional.empty());
    when(memberRepository.save(member)).thenReturn(member);

    Member result = memberService.registerMember(member);

    assertNotNull(result);
    assertEquals(member.getEmail(), result.getEmail());
    verify(memberRepository, times(1)).save(member);
  }

  @Test
  void registerMember_emailAlreadyExists() {
    Member member = new Member("1", "John Doe", "john.doe@example.com", "1234567890");
    when(memberRepository.findByEmail(member.getEmail())).thenReturn(Optional.of(member));

    Exception exception =
        assertThrows(
            Exception.class,
            () -> {
              memberService.registerMember(member);
            });

    assertEquals("Email already exists", exception.getMessage());
    verify(memberRepository, never()).save(member);
  }

  @Test
  void findMemberById_success() {
    Member member = new Member("1", "John Doe", "john.doe@example.com", "1234567890");
    when(memberRepository.findById("1")).thenReturn(Optional.of(member));

    Optional<Member> result = memberService.findMemberById("1");

    assertTrue(result.isPresent());
    assertEquals(member.getId(), result.get().getId());
  }

  @Test
  void findMemberById_notFound() {
    when(memberRepository.findById("1")).thenReturn(Optional.empty());

    Optional<Member> result = memberService.findMemberById("1");

    assertFalse(result.isPresent());
  }

  @Test
  void listAllMembers() {
    Member member = new Member("1", "John Doe", "john.doe@example.com", "1234567890");
    when(memberRepository.findAllOrderedByName()).thenReturn(Collections.singletonList(member));

    List<Member> result = memberService.listAllMembers();

    assertNotNull(result);
    assertEquals(1, result.size());
  }

  @Test
  void deleteMember() {
    doNothing().when(memberRepository).delete("1");

    memberService.deleteMember("1");

    verify(memberRepository, times(1)).delete("1");
  }
}

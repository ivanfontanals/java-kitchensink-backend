/*
 * This file was generated by the migration tool. Do not modify it manually.
 */

package com.mongodb.migration.kitchensink.api;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import com.mongodb.migration.kitchensink.domain.model.Member;
import com.mongodb.migration.kitchensink.domain.ports.incoming.MemberService;
import java.util.Collections;
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.test.web.reactive.server.WebTestClient;

/** Unit tests for {@link MemberController}. */
public class MemberControllerTest {

  @Mock private MemberService memberService;

  @InjectMocks private MemberController memberController;

  private WebTestClient webTestClient;

  @BeforeEach
  public void setUp() {
    MockitoAnnotations.openMocks(this);
    webTestClient = WebTestClient.bindToController(memberController).build();
  }

  @Test
  public void testRegisterMember() throws Exception {
    Member member = new Member("1", "John Doe", "john.doe@example.com", "1234567890");
    when(memberService.registerMember(any(Member.class))).thenReturn(member);

    webTestClient
        .post()
        .uri("/api/members")
        .contentType(MediaType.APPLICATION_JSON)
        .bodyValue(member)
        .exchange()
        .expectStatus()
        .isOk()
        .expectBody(Member.class)
        .isEqualTo(member);
  }

  @Test
  public void testGetMemberById() {
    Member member = new Member("1", "John Doe", "john.doe@example.com", "1234567890");
    when(memberService.findMemberById("1")).thenReturn(Optional.of(member));

    webTestClient
        .get()
        .uri("/api/members/1")
        .exchange()
        .expectStatus()
        .isOk()
        .expectBody(Member.class)
        .isEqualTo(member);
  }

  @Test
  public void testListAllMembers() {
    Member member = new Member("1", "John Doe", "john.doe@example.com", "1234567890");
    when(memberService.listAllMembers()).thenReturn(Collections.singletonList(member));

    webTestClient
        .get()
        .uri("/api/members")
        .exchange()
        .expectStatus()
        .isOk()
        .expectBodyList(Member.class)
        .hasSize(1)
        .contains(member);
  }

  @Test
  public void testDeleteMember() {
    webTestClient.delete().uri("/api/members/1").exchange().expectStatus().isNoContent();
  }
}
